plugins {
	id "java-library"
	id "test-report-aggregation"
	id "jacoco"
}
apply from: "../dependencies.gradle"

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_1_8
	withJavadocJar()
	withSourcesJar()
}

tasks.sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = "io.github.dk96-os"
			artifactId = "generators"
			version = "0.4.1"
			from components.java
		}
	}
}

dependencies {
	api project(":lists")
	api project(":statistics")
	api project(":numbers")

	api guava

	// JUnit 5
	testImplementation platform("org.junit:junit-bom:5.7.2")
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

sourceSets.main {
	java.srcDirs("src/main/java")
}

tasks.test {
	useJUnitPlatform() {
		excludeTags("slow")
	}
	maxParallelForks = 3
	testLogging {
		events("passed", "failed") // not including "skipped"
	}
	reports {
		junitXml {
			outputPerTestCase = true
			mergeReruns = true
		}
	}
	doLast {
		tasks.testAggregateTestReport
	}
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("jacocoReport")
	}
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test
	violationRules {
		failOnViolation = true
		rule {
			limit {
				counter = "INSTRUCTION"
				minimum = 0.9
			}
			limit {
				counter = "BRANCH"
				minimum = 0.9
			}
		}
	}
}

tasks.check {
	dependsOn tasks.testAggregateTestReport
}
