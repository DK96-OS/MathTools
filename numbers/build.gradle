plugins {
	id "org.jetbrains.kotlin.jvm"
	id "jacoco"
	id "org.jetbrains.dokka" version "1.6.10"
}
apply from: "../dependencies.gradle"

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	withJavadocJar()
	withSourcesJar()
}

tasks.sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = "io.github.dk96-os"
			artifactId = "numbers"
			version = "0.4"
			from components.java
		}
	}
}

dependencies {
	api project(":lists")
	api project(":statistics")

	api guava

    // Align versions of all Kotlin components
    implementation platform("org.jetbrains.kotlin:kotlin-bom")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

	// Coroutine support
    //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
    //testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
    
    // JUnit 5
    testImplementation platform("org.junit:junit-bom:5.7.2")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

sourceSets.main {
	java.srcDirs("src/main/java", "src/main/kotlin")
}

tasks.test {
    useJUnitPlatform() {
        excludeTags("slow")
    }
	maxParallelForks = 3
	testLogging {
        events("passed", "failed") // not including "skipped"
    }
    reports {
    	junitXml {
    		outputPerTestCase = true
    		mergeReruns = true
    	}
    }
}

tasks.jacocoTestReport {
	dependsOn tasks.test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("jacocoReport")
	}
}

tasks.jacocoTestCoverageVerification {
	dependsOn tasks.test
	violationRules {
		failOnViolation = true
		rule {
			limit {
				counter = "INSTRUCTION"
				minimum = 0.9
			}
			limit {
				counter = "BRANCH"
				minimum = 0.8
			}
		}
	}
}